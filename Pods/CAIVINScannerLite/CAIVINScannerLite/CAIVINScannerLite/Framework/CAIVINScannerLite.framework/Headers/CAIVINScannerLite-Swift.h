// Generated by Apple Swift version 3.0 (swiftlang-800.0.46.2 clang-800.0.38)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

/**
  The \code
  CoxAutomotiveVINKeyboardDelegate
  \endcode protocol must be adopted by the VIN keyboard delegate, it is the
  only means of receiving messages about the state of the VIN keyboard.
*/
SWIFT_PROTOCOL("_TtP17CAIVINScannerLite22CAIVINKeyboardDelegate_")
@protocol CAIVINKeyboardDelegate
/**
  Informs the delegate that the keyboard will add a new character to the textField.
  \param string The character that will be added to the VIN keyboard’s textField text.

*/
- (void)keyboardWillAddCharacter:(NSString * _Nonnull)string;
/**
  Informs the delegate that the keyboard has changed the textField’s text.
  \param text The new text that the textField now contains.

*/
- (void)keyboardDidChangeText:(NSString * _Nonnull)text;
/**
  The keyboard will be dismissed via the use of a keyboard control key. This is available on iPad
  only.
*/
- (void)keyboardWillDismissKeyboard;
@end

@class UIColor;
@class UIImage;
@class UIFont;
enum CAIVINScannerLogLevel : NSInteger;
enum ScannerStyle : NSInteger;
@class UIViewController;
@class UITextField;
@class UIView;

/**
  This class represents the public interface to the VIN scanner framework.
*/
SWIFT_CLASS("_TtC17CAIVINScannerLite13CAIVINScanner")
@interface CAIVINScanner : NSObject
/**
  The color that is used with a fill drawing command on the scanner’s background
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull backgroundFillColor;)
+ (UIColor * _Nonnull)backgroundFillColor;
+ (void)setBackgroundFillColor:(UIColor * _Nonnull)value;
/**
  The color that is used as the border color to the scanner’s background.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull backgroundBorderColor;)
+ (UIColor * _Nonnull)backgroundBorderColor;
+ (void)setBackgroundBorderColor:(UIColor * _Nonnull)value;
/**
  A boolean indicating whether or not to show the help button
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL showHelpButton;)
+ (BOOL)showHelpButton;
+ (void)setShowHelpButton:(BOOL)value;
/**
  A boolean indicating whether or not to show the keyboard button
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL showKeyboardButton;)
+ (BOOL)showKeyboardButton;
+ (void)setShowKeyboardButton:(BOOL)value;
/**
  The logo that appears in the top right of the scanner screen
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nullable logoImage;)
+ (UIImage * _Nullable)logoImage;
+ (void)setLogoImage:(UIImage * _Nullable)newValue;
/**
  The text to use for the scanner’s title
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable titleText;)
+ (NSString * _Nullable)titleText;
+ (void)setTitleText:(NSString * _Nullable)value;
/**
  The font to use for the scanner’s title
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull titleLabelFont;)
+ (UIFont * _Nonnull)titleLabelFont;
+ (void)setTitleLabelFont:(UIFont * _Nonnull)value;
/**
  The color to use for the Scanner’s title text
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull titleTextColor;)
+ (UIColor * _Nonnull)titleTextColor;
+ (void)setTitleTextColor:(UIColor * _Nonnull)value;
/**
  The text to use for the scanner’s alignment message
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable alignmentText;)
+ (NSString * _Nullable)alignmentText;
+ (void)setAlignmentText:(NSString * _Nullable)value;
/**
  The font to use  for the scanner’s alignment message
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull alignmentLabelFont;)
+ (UIFont * _Nonnull)alignmentLabelFont;
+ (void)setAlignmentLabelFont:(UIFont * _Nonnull)value;
/**
  The color to use for the Scanner’s alignment message text
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull alignmentTextColor;)
+ (UIColor * _Nonnull)alignmentTextColor;
+ (void)setAlignmentTextColor:(UIColor * _Nonnull)value;
/**
  The color of the scanner’s target reticule
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull targetColor;)
+ (UIColor * _Nonnull)targetColor;
+ (void)setTargetColor:(UIColor * _Nonnull)value;
/**
  The color of the scanner’s guidelines.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull guidelinesColor;)
+ (UIColor * _Nonnull)guidelinesColor;
+ (void)setGuidelinesColor:(UIColor * _Nonnull)value;
/**
  The image to use for the help button in the normal state
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nullable helpButtonNormalImage;)
+ (UIImage * _Nullable)helpButtonNormalImage;
+ (void)setHelpButtonNormalImage:(UIImage * _Nullable)value;
/**
  The iamge to use for the help button in a highlighted state
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nullable helpButtonHighlightImage;)
+ (UIImage * _Nullable)helpButtonHighlightImage;
+ (void)setHelpButtonHighlightImage:(UIImage * _Nullable)value;
/**
  The image to use for the keyboard button in the normal state
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nullable keyboardButtonNormalImage;)
+ (UIImage * _Nullable)keyboardButtonNormalImage;
+ (void)setKeyboardButtonNormalImage:(UIImage * _Nullable)value;
/**
  The image to use for the keyboard button in a highlighted state
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nullable keyboardButtonHighlightImage;)
+ (UIImage * _Nullable)keyboardButtonHighlightImage;
+ (void)setKeyboardButtonHighlightImage:(UIImage * _Nullable)value;
/**
  The image to use for the cancel button in the normal state
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nullable cancelButtonNormalImage;)
+ (UIImage * _Nullable)cancelButtonNormalImage;
+ (void)setCancelButtonNormalImage:(UIImage * _Nullable)value;
/**
  The image to use for the cancel button in a highlighted state
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nullable cancelButtonHighlightImage;)
+ (UIImage * _Nullable)cancelButtonHighlightImage;
+ (void)setCancelButtonHighlightImage:(UIImage * _Nullable)value;
/**
  The image to use for the flash button in the normal state
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nullable flashButtonNormalImage;)
+ (UIImage * _Nullable)flashButtonNormalImage;
+ (void)setFlashButtonNormalImage:(UIImage * _Nullable)value;
/**
  The image to use for the flash button in a highlighted state
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nullable flashButtonHighlightImage;)
+ (UIImage * _Nullable)flashButtonHighlightImage;
+ (void)setFlashButtonHighlightImage:(UIImage * _Nullable)value;
/**
  The color to use as a key’s border color
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull keyBorderColor;)
+ (UIColor * _Nonnull)keyBorderColor;
+ (void)setKeyBorderColor:(UIColor * _Nonnull)value;
/**
  The color to use as a key’s background color
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull keyBackgroundColor;)
+ (UIColor * _Nonnull)keyBackgroundColor;
+ (void)setKeyBackgroundColor:(UIColor * _Nonnull)value;
/**
  The color to use for the key’s character
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull keyTextColor;)
+ (UIColor * _Nonnull)keyTextColor;
+ (void)setKeyTextColor:(UIColor * _Nonnull)value;
/**
  The color to use for a disabled key’s border
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull disabledKeyTextColor;)
+ (UIColor * _Nonnull)disabledKeyTextColor;
+ (void)setDisabledKeyTextColor:(UIColor * _Nonnull)value;
/**
  THe color to use for a disabled key’s background
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull disabledKeyBackgroundColor;)
+ (UIColor * _Nonnull)disabledKeyBackgroundColor;
+ (void)setDisabledKeyBackgroundColor:(UIColor * _Nonnull)value;
/**
  The color of the keyboard’s background
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull keyboardBackgroundColor;)
+ (UIColor * _Nonnull)keyboardBackgroundColor;
+ (void)setKeyboardBackgroundColor:(UIColor * _Nonnull)value;
/**
  Te image to use instead of the keyboard’s background color
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIImage * _Nullable keyboardBackgroundImage;)
+ (UIImage * _Nullable)keyboardBackgroundImage;
+ (void)setKeyboardBackgroundImage:(UIImage * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum CAIVINScannerLogLevel logLevel;)
+ (enum CAIVINScannerLogLevel)logLevel;
+ (void)setLogLevel:(enum CAIVINScannerLogLevel)newValue;
/**
  Provides a VIN scanner of type \code
  UIViewController
  \endcode. You should provide either a delegate object or
  a completion handler. If you provide both, then the completion handler will be used and the delegate
  will be ignored.
  \code
  // Example use:

  let VINScanner = CAIVINScanner.scannerViewControllerWithStyle(.Default, delegate: nil, completion: {(success, VIN, didCancel) in

         if didCancel == true {
             self.dismissViewControllerAnimated(true, completion: nil)
         }


         if success == true {
             self.dismissViewControllerAnimated(true, completion: {

             if let capturedVIN = VIN {
                 self.showVINCaptureAlert(capturedVIN)
             }

         })
     }

  })


  \endcode\param style The style to use for the scanner’s user interface

  \param delegate The object or type that acts as the delegate of the VIN scanner

  \param completion The closure to excute on a successful or canceled scan


  returns:
  A view controller
*/
+ (UIViewController * _Nonnull)scannerViewControllerWithStyle:(enum ScannerStyle)style delegate:(id _Nullable)delegate completion:(void (^ _Nullable)(BOOL, NSString * _Nullable, BOOL))completion;
/**
  Returns an input view for use with a textField
  \code
  // Example use: 

  let VINTextField = UITextField(frame: aFrame)

  let inputKeyboard = CoxAutomotiveVINScanner.VINKeyboardInputView(textField: VINTextField, delegate: self)

  VINTextField.inputView = inputKeyboard


  \endcode\param textField The textField you want the keyboard to use for input

  \param delegate The object or type that acts as the delegate of the VIN keyboard


  returns:
  The input view to use with the passed in textField.
*/
+ (UIView * _Nonnull)VINKeyboardInputViewWithTextField:(UITextField * _Nonnull)textField delegate:(id _Nullable)delegate;
/**
  Resets the keyboard to it’s default state and clears the text from it’s assoicated textField.
  If the input view of the textField is not the VIN Keyboard this method will do nothing.
  \param textfield The textField for which the input view is the VIN Keyboard.

*/
+ (void)resetVINKeyboard:(UITextField * _Nonnull)textfield;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  The \code
  CoxAutomotiveVINScannerDelegate
  \endcode protocol is adopted by an object or type  to receive information
  about the VIN scanning process. This information is also provided via the use of completion handlers.
  Messages related to the scanner’s user iterface are also sent to the delegate , allowing you to provide
  your own implementations for handling help and keyboard display requests.
*/
SWIFT_PROTOCOL("_TtP17CAIVINScannerLite21CAIVINScannerDelegate_")
@protocol CAIVINScannerDelegate
@optional
/**
  A scan has be completed. This does not mean that the scan was successful, only that scanner completed
  the process of scanning a VIN.
*/
- (void)scannerDidCompleteScan;
/**
  A VIN has been successfully scanned and decoded into a string representation.
  \param VIN The VIN number decoded by the scanner.

*/
- (void)scannerDidDecodeVIN:(NSString * _Nonnull)VIN;
@required
/**
  The function called when the user interface has fired an event calling for keyboard functionality.
  It is left to you to provide the requested keyboard. If the \code
  showKeyboardButton
  \endcode property is set
  to false the delegate will not receive this call.
*/
- (void)scannerDidRequestKeyboard;
/**
  The function called when the user interface has fired an event calling for help functionality. It is
  left to you to provide any help functionality. If the \code
  showHelpButton
  \endcode property is set
  to false the delegate will not receive this call.
*/
- (void)scannerDidRequestHelp;
- (void)scannerWillProcessImage:(UIImage * _Nonnull)image;
- (void)scannerDidProcessImage:(UIImage * _Nonnull)image success:(BOOL)success;
@end

/**
  Set the log level of messages you would like to see the framework log.
  \code
  public enum CAIVINScannerLogLevel {
      case None
      case Error
      case Warn
      case Info
      case Verbose
  }

  \endcode<ul>
    <li>
      \code
      None
      \endcode:<br/>
      No messages will be logged at all.
    </li>
    <li>
      \code
      Error
      \endcode:<br/>
      Error messages only will be logged.
    </li>
    <li>
      \code
      Warn
      \endcode:<br/>
      Error and warning messages only will be logged
    </li>
    <li>
      \code
      Info
      \endcode:<br/>
      Error, warning and informational messages will be logged.
    </li>
    <li>
      \code
      Verbose
      \endcode:<br/>
      Every message will be logged, this level of logging will produce the most output.
    </li>
  </ul>
*/
typedef SWIFT_ENUM(NSInteger, CAIVINScannerLogLevel) {
  CAIVINScannerLogLevelNone = 0,
  CAIVINScannerLogLevelError = 1,
  CAIVINScannerLogLevelWarn = 2,
  CAIVINScannerLogLevelInfo = 3,
  CAIVINScannerLogLevelVerbose = 4,
};

/**
  The style of the VIN scanner user interface
  <ul>
    <li>
      Default:  </br>
      The default style that will be used, based on the vAuto Provision App’s scanner interface
    </li>
    <li>
      ValueOne:   </br>
      For future use, will return default style now.
    </li>
    <li>
      ValueTwo:   </br>
      For future use, will return default style now.
    </li>
    <li>
      ValueThree: </br>
      For future use, will return default style now.
    </li>
    <li>
      ValueFour:  </br>
      For future use, will return default style now.
    </li>
  </ul>
*/
typedef SWIFT_ENUM(NSInteger, ScannerStyle) {
  ScannerStyleDefault = 0,
  ScannerStyleValueOne = 1,
  ScannerStyleValueTwo = 2,
  ScannerStyleValueThree = 3,
  ScannerStyleValueFour = 4,
};

#pragma clang diagnostic pop
